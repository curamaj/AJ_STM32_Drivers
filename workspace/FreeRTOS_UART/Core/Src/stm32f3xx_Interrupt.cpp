#include "stm32f3xx_Interrupt.hpp"
#include "stm32f3xx.h" // Need this to include `stm32f303xc.h` for the `EXTI_TypeDef` we will be setting manually in our class here...

// [2-20-22]: For now the following code can reside here - but I believe it should be placed in its own class.

/*
  - void* func - Our Callback function
  - Edge edge  - Our Edge to trigger ISR for.
*/
// void attachInterruptHandler(void* func, Edge edge) {
// }

/*
  - For external interrupt generation, interrupt line should be configured & enabled:
    - Program the 2 trigger refisters with the desired edge detection
    - Enable the interrupt request by writing a '1' to the corresponding bit in the interrupt mask register.
    - When the selected edge occurs on the external interrupt line, an interrupt request is generated. 
    - The pending bit corresponding to the interrupt line is also set. The request is reset by writing a `1` to the pending register (likely to be done in ISR!).
    - For external lines, an interrupt/event request can also be generated by software by writing a `1` to the software interrupt/event register.
  - Hardware interrupt selection (for our button press!)
    - Configure the mask bit in the EXTI_IMR register
    - Configure the Trigger Selection bits of the Interrupt line (EXTI_RTSR / EXTI_FTSR)
    - Configure the enable & mask bits that control the NVIC IRQ Channel mapped to the EXTI for proper interrupt acknowledgement.
  - Note: Hardare Event selction relies on EXTI_EMR register & RTSR/FTSR registers.
*/
void enableInterrupts(uint32_t line) {
    // Should pass in 0 for PA0 for now.
    // For now we can assume that the interrupt to enable is on line 0?
    // Create a EXTI_TypeDef object for us to configure registers in mem map
    EXTI_TypeDef* myEXTI = EXTI; // Point to base address!
    // NVIC_Type*    myNVIC; // use of NVIC_EnableIRQ(interrupt#) takes care of NVIC config. Would be manipulating ISER register based on `stm32f303xc.h` IRQn to enable.
    
    // place a 1 at mask position to allows interrupts for line#
    if (line < 32) {
        myEXTI->IMR  |= (1 << line);

        // configure rising edge trigger selection. (may move this to attachInterruptHandler..?)
        if (line <= 28 && line >= 23) {
            // cannot select falling/rising trigger selection.
        } else {
            // proceed with trigger selection. lets do rising.
            myEXTI->RTSR |= (1 << line);
        }

    } else if (line >= 32 || line <= 35) {
        uint32_t temp = line - 32;
        myEXTI->IMR2 |= (1 << temp);
        
        // configure rising edge trigger selection. (may move this to attachInterruptHandler..?)
        if (line <= 28 && line >= 23) {
            // cannot select falling/rising trigger selection.
        } else {
            // proceed with trigger selection. lets do rising.
            myEXTI->RTSR |= (1 << line);
        }
    }
}